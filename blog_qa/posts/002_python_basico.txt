
Python b치sico
En el post anterior hablamos sobre Python y su aplicaci칩n al campo del an치lisis de datos. Aprendimos a instalarlo y vimos diferentes herramientas que podemos utilizar para trabajar con 칠l, desde scripts en un editor de texto como VSCode hasta notebooks en Jupyter o Google Colab.
En este post vamos a introducir la sintaxis b치sica de Python para entender conceptos esenciales de programaci칩n as칤 como la mec치nica del lenguaje. Python es un lenguaje dise침ado con el objetivo de ser simple y expl칤cito, asemej치ndose lo m치ximo posible al concepto de pseudoc칩digo.
Objetos
En Python cualquier n칰mero, cadena de caracteres (string), funci칩n, clase, m칩dulo, etc, es considerado como un objeto, una "caja" con su propio tipo y datos internos que es tratada de la misma manera independientemente de su funci칩n. Este es uno de los motivos que hacen que Python sea un lenguaje tan flexible.
Comentarios
Podemos utilizar el s칤mbolo # para incluir texto que no queremos que sea ejecutado, es decir, que sea ignorado por Python. Esto suele utilizarse para incluir comentarios en nuestro c칩digo, indicando la funcionalidad del mismo o cualquier aspecto que otra persona tenga que tener en cuenta si alguna vez se encuentra con nuestro programa.
# esto es un comentario, Python ignorar치 esta l칤nea

Variables y referencias
Cuando asignamos una variable en Python estamos creando una referencia al objeto de la derecha del s칤mbolo =. Esto significa que cualquier cambio aplicado al objeto original se ver치 tambi칠n reflejado en la nueva variable, a diferencia de lo que ocurrir칤a si se crease una copia.
a = [1, 2, 3]
a

[1, 2, 3]


游눠 En este ejemplo, la variable a es una lista, un tipo de estructura de datos que Python nos ofrece para almacenar objetos de manera secuencial. Hablaremos sobre listas (y otras estructuras de datos) m치s adelante.

b = a
b

[1, 2, 3]

a.append(4)
a

[1, 2, 3, 4]

b

[1, 2, 3, 4]

Entender cu치ndo, c칩mo y por qu칠 los datos son copiados o referenciados es importante, sobre todo cuando trabajamos con grandes datasets.
Referencias din치micas
A diferencia de otros lenguajes, una variable en Python (al ser una referencia a otro objeto) no tiene ning칰n tipo asociado, toda la informaci칩n est치 almacenada en el objeto original.
a = 1
a

1

a = "hola"
a

'hola'

Podemos cambiar el objeto al que una variable hace referencia en cualquier momento. Podemos conocer el tipo del objeto al que una variable hace referencia con la funci칩n isinstance.
# a es un n칰mero entero (int)

a = 1
isinstance(a, int)

True

# a no es un string (str)

a = 1
isinstance(a, str)

False

# a s칤 es un string (str)


a = "hola"
isinstance(a, str)

True

M칠todos y atributos
La mayor칤a de objetos en Python tienen m칠todos (funciones asociadas con el objeto) y atributos (otros objetos guardados en su interior). Por ejemplo, un objeto de tipo str tiene m칠todos para convertirlo a may칰sculas, separarlo en caracteres, etc.
a = "hola"
a.capitalize()

'Hola'

a.upper()

'HOLA'

Esto nos aporta una gran funcionalidad por defecto que podemos aprovechar y que de otra forma tendriamos que implementar nosotros mismos.
Operadores binarios y comparaci칩n
En Python tenemos disponibles pr치cticamente todos los operadores binarios que podemos esperar de cualquier lenguaje de programaci칩n
# suma

1 + 1

2

# resta

2 - 1

1

# multiplicaci칩n

2 * 3

6

# divisi칩n

1 / 2

0.5

# division entera

3 // 2

1

# potenciaci칩n

2**3

8

# operador AND (True si ambos operadores son True)

True & False

False

# operador OR (True si alguno de los operadores es True)

True | False

True

Lo mismo ocurre con los operadores de comparaci칩n
# igualdad

1 == 2

False

# desigualdad

1 != 2

True

# menor que

1 < 1

False

# menor o igual que

1 <= 1

True

# mayor que

3 > 2

True

# mayor o igual que

2 >= 3

False

Tipos b치sicos
En Python encontramos varios tipos por defecto
# n칰mero decimal

float

float

# n칰mero entero

int

int

# n칰mero decimal

a = 1.34

# n칰mero entero

b = 2

# string

str

str

Una de las caracter칤sticas por las que Python brilla es su potencia a la hora de trabajar con strings.
a = 'esto es una cadena de caracteres'
b = "podemos usar comillas simples o dobles"
c = """
    Podemos hacer cadenas de m칰ltiples l칤neas
    con triples comillas (simples o dobles)
"""

La funci칩n print es muy 칰til para mostrar por consola un string.
print(c)

    Podemos hacer cadenas de m칰ltiples l칤neas
    con triples comillas (simples o dobles)

Podemos transformar otros tipos de datos a string con la funci칩n str.
a = 1.3
b = str(a)
b

'1.3'

Aunque la forma m치s vers치til es utilizando string templates.
c = f"el valor de 'a' es {a}"
print(c)

el valor de 'a' es 1.3

# booleano

bool

bool

S칩lo existen dos valores booleanos: True y False.
# cadena de bytes

bytes

bytes

# valor inexistente

None

Control de flujo
En Python podemos encontrar varias palabras reservadas para la l칩gica condicional, bucles y otros m칠todos de control de flujo.
# if, elif, else

x = 1

if x < 0:
    print("negativo")
elif x == 0:
    print("cero")
else:
    print("positivo")

positivo


丘멆잺 Para estructurar nuestro c칩digo con Python utilizamos indentaci칩n en vez de llaves como otros lenguajes de programaci칩n.

Utilizamos bucles for para iterar sobre un iterador.
# bucle for

for i in range(3):
    print(i)

0
1
2


游눠 La funci칩n range nos devuelve un iterador sobre una secuencia consecutiva de n칰meros enteros.

Podemos saltar al siguiente paso con la palabra continue.
for i in range(5):
    # si el n칰mero es impar, saltar al siguiente paso
    # sin hacer el 'print'
    if i % 2:
        continue
    print(i)

0
2
4

Tambi칠n podemos detener el bucle con la palabra break.
for i in range(5):
    # parar cuando lleguemos a 3
    if i >= 3:
        break
    print(i)

0
1
2

Como en otros lenguajes, podemos usar un bucle while para ejectuar c칩digo siempre y cuando se cumpla una condici칩n
i = 0
while i < 3:
    print(i)
    i = i + 1

0
1
2

Una funcionalidad que puede ahorrarnos varias l칤neas de c칩digo es el uso del operador ternario
x = 1
if x > 0:
    a = x
else:
    a = 0
a

1

# equivalente a la expresi칩n anterior

a = x if x > 0 else 0
a

1

M칩dulos
En Python cualquier archivo terminado en .py es considerado como un m칩dulo y puede ser importado para tener acceso a su c칩digo.
# importamos el m칩dulo llamado `module`, que tiene el siguiente c칩digo dentro
#
# def f(x):
#     return 2*x

import module

module.f(1)

2


丘멆잺 Hablaremos sobre funciones en pr칩ximos posts, de momento es necesario con que entiendas que la funci칩n f recibe una variable x y la devuelve, multiplicada por 2.

Existen varias maneras de importar m칩dulos, aqu칤 tienes algunos ejemplos
# podemos asignar un nuevo nombre al m칩dulo

import module as m

m.f(2)

4

# podemos usar la funci칩n directamente,
# sin usar el nombre del m칩dulo

from module import f

f(3)

6

# podemos asignar un nuevo nombre a la funci칩n

from module import f as mf

mf(4)

8

# podemos importar todo lo que haya
# en el m칩dulo (no recomendado)

from module import *

f(5)

10

Pr칩ximos pasos
Hasta aqu칤 nuestro viaje explorando los conceptos b치sicos del lenguaje Python. Aquellos familiarizados con el mundo de la programaci칩n y que ya conozcan alg칰n lenguaje encontrar치n en Python una sintaxis familiar con la funcionalidad t칤pica de cualquier lenguaje moderno. Tras un tiempo de uso ver치n que la simplicidad del lenguaje, la gran funcionalidad que ofrece por defecto y la gran cantidad de m칩dulos existentes en el ecosistema le convertir치n en un programador m치s productivo, capaz de expresar m치s con menos c칩digo. En cuanto a aquellos que no hayan programado nunca, encontrar치n en Python un lenguaje sencillo de aprender y que les permitir치 el desarrollo de programas interesantes sin tener que invertir cientos de horas practicando.
En el siguiente post de esta serie hablaremos sobre las estructuras de datos que Python nos ofrece y que nos permitir치n llevar a cabo tareas m치s interesantes.

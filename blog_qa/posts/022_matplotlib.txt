
Matplotlib
Seguimos nuestro viaje en la exploraci√≥n de las librer√≠as para an√°lisis de datos que el ecosistema de Python nos ofrece. Hasta ahora hemos visto c√≥mo empezar a trabajar con Python y las librer√≠as de Numpy y Pandas. A esta lista agregamos la librer√≠a de visualizaci√≥n Matplotlib, la cual exploramos en detalle en este post y que nos va a permitir crear gr√°ficos de calidad que podemos usar para comunicar nuestros descubrimientos, hip√≥tesis y conclusiones.
Para empezar a trabajar con Matplotlib, tenemos que importarlo.
import matplotlib


üí° Puedes instalar la librer√≠a con el comando pip install matplotlib o conda install matplotlib dependiendo de tu instalaci√≥n de Python.

Al usar Matplotlib en la l√≠nea de comandos  o en un script de Python, las gr√°ficas nos aparecer√°n en una ventana separada. Sin embargo, al trabajar con notebooks, podemos visualizar nuestros gr√°ficos directamente en el documento (lo cual es ideal a la hora de generar informes con c√≥digo y visualizaciones en un solo documento). √âsto lo indicamos con el siguiente comando.
%matplotlib inline

Nuestro primer gr√°fico
En el siguiente ejemplo puedes ver como genera un sencillo gr√°fico. Para ello simplemente tenemos que llamar a la funci√≥n plot con una lista de valores para generar la imagen y show para visualizarla.
import matplotlib.pyplot as plt

plt.plot([1, 2, 4, 9, 5, 3])
plt.show()


Como puedes ver, los valores de la lista se usan para el eje y mientras que en el eje x se utiliza el √≠ndice de cada valor en la lista. Podemos pasar dos listas a la funci√≥n plot para indicar los valores en ambos ejes.
plt.plot([-3, -2, 5, 0], [1, 6, 4, 3])
plt.show()


Puedes visualizar cualquier funci√≥n matem√°tica generando una lista con los valores de las variables independientes y calculando los valore de las variables dependientes con Numpy de la siguiente manera
import numpy as np

x = np.linspace(-2, 2, 500)
y = x**2

plt.plot(x, y)
plt.show()


Customizando un gr√°fico
Ahora que conocemos la sintaxis b√°sica para crear y visualizar un gr√°fico con Matplotlib vamos a ver diferente funcionalidad que nos ofrece para tunear nuestro gr√°fico y hacerlo m√°s bonito. Podemos empezar a√±adiendo un t√≠tulo y etiquetas a nuestros ejes. En ocasiones tambi√©n es interesante a√±adir una cuadr√≠cula en el fondo para mejorar la lectura de datos.
plt.plot(x, y)
plt.title("Mi gr√°fico")
plt.xlabel("x")
plt.ylabel("y = x**2")
plt.grid(True)
plt.show()


Podemos cambiar el estilo de la l√≠nea de manera sencilla pasando diferentes opciones en la funci√≥n plot, como un string que incluye el formato y color. Puedes encontrar una lista con los diferentes estilos en la documentaci√≥n.
# l√≠nea negra punteada
plt.plot(x, y, '-.k')
plt.title("Mi gr√°fico")
plt.xlabel("x")
plt.ylabel("y = x**2")
plt.grid(True)
plt.show()


# diamantes rojos
x2 = np.linspace(-2, 2, 20)
y2 = x2**3

plt.plot(x2, y2, 'dr')
plt.title("Mi gr√°fico")
plt.xlabel("x")
plt.ylabel("y = x**3")
plt.grid(True)
plt.show()


Podemos a√±adir varias curvas en la misma gr√°fica simplemente llamando a la funci√≥n plot varias veces.
plt.plot(x, y, '-.k')
plt.plot(x2, y2, 'dr')
plt.title("Mi gr√°fico")
plt.xlabel("x")
plt.ylabel("y")
plt.grid(True)
plt.show()


A√±adiendo una etiqueta a cada curva podemos generar una leyenda, la cual podemos situar en diferentes posiciones.
plt.plot(x, y, '-.k', label="y = x**2")
plt.plot(x2, y2, 'dr', label="y = x**3")
plt.title("Mi gr√°fico")
plt.xlabel("x")
plt.ylabel("y")
plt.grid(True)
plt.legend(loc='lower right')
plt.show()


Con la funci√≥n axis podemos delimitar la extensi√≥n de los ejes.
plt.plot(x, y, '-.k', label="y = x**2")
plt.plot(x2, y2, 'dr', label="y = x**3")
plt.title("Mi gr√°fico")
plt.xlabel("x")
plt.ylabel("y")
plt.grid(True)
plt.legend(loc='lower right')
plt.axis([-2,2,-4,4])
plt.show()


Por √∫ltimo vamos a ver c√≥mo cambiar el tama√±o del texto para que sea m√°s legible. Tambi√©n podemos usar notaci√≥n Latex para introducir ecuaciones y s√≠mbolos en nuestros t√≠tulos, ejes y leyendas.
plt.plot(x, y, '-.k', label="$y = x^2$")
plt.plot(x2, y2, 'dr', label="$y = x^3$")
plt.title("Mi gr√°fico", fontsize=20)
plt.xlabel("x", fontsize=18)
plt.ylabel("y", fontsize=18)
plt.grid(True)
plt.legend(loc='lower right', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.axis([-2,2,-4,4])
plt.show()


Ahora que tenemos nuestro gr√°fico listo, podemos guardarlo en un archivo simplemente sustituyendo la funci√≥n show por savefig.
plt.plot(x, y, '-.k', label="$y = x^2$")
plt.plot(x2, y2, 'dr', label="$y = x^3$")
plt.title("Mi gr√°fico", fontsize=20)
plt.xlabel("x", fontsize=18)
plt.ylabel("y", fontsize=18)
plt.grid(True)
plt.legend(loc='lower right', fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.axis([-2,2,-4,4])
plt.savefig("mi_grafico.png", transparent=True)


Adem√°s de las opciones de customizaci√≥n que hemos visto existen muchas otras que podr√°s encontrar en la documentaci√≥n, la cual incluye multitud de ejemplos √∫tiles.
M√∫ltiples gr√°ficos
Una funcionalidad muy √∫til que Matplotlib nos ofrece es la de generar varias gr√°ficos en una misma figura. Vamos a ver c√≥mo visualizar varias im√°genes del dataset MNIST a la vez en una solo figura.
from sklearn.datasets import fetch_openml

mnist = fetch_openml('mnist_784', version=1)
X, y = mnist["data"], mnist["target"]

X.shape, y.shape

((70000, 784), (70000,))

X = X.reshape(-1, 28,28)

X.shape

(70000, 28, 28)

Empezamos definiendo una figura vac√≠a con un tama√±o determinado con la funci√≥n figure. Despu√©s, podemos a√±adir sub-figuras a la figure con la funci√≥n subplot indicando su posici√≥n en la figura global.
fig = plt.figure(figsize=(3,3))
ax = plt.subplot(1,1,1)
ax.imshow(X[0], cmap="gray")
plt.axis('off')
plt.show()



‚ö° La funci√≥n imshow nos permite visualizar im√°genes. Puedes aprender m√°s aqu√≠.

En la funci√≥n subplot ver√°s 3 n√∫meros: n√∫mero de filas, n√∫mero de columnas y la posici√≥n de la sub-figura (empezando por 1). Podemos a√±adir m√°s im√°genes de la siguiente manera.
fig = plt.figure(figsize=(10,5))
ax = plt.subplot(1,3,1)
ax.imshow(X[0], cmap="gray")
ax.axis('off')
ax = plt.subplot(1,3,2)
ax.imshow(X[1], cmap="gray")
ax.axis('off')
ax = plt.subplot(1,3,3)
ax.imshow(X[2], cmap="gray")
ax.axis('off')
plt.show()


fig = plt.figure(figsize=(5,10))
ax = plt.subplot(3,1,1)
ax.imshow(X[0], cmap="gray")
ax.axis('off')
ax = plt.subplot(3,1,2)
ax.imshow(X[1], cmap="gray")
ax.axis('off')
ax = plt.subplot(3,1,3)
ax.imshow(X[2], cmap="gray")
ax.axis('off')
plt.show()


fig = plt.figure(figsize=(5,5))
ax = plt.subplot(2,2,1)
ax.imshow(X[0], cmap="gray")
ax.axis('off')
ax = plt.subplot(2,2,2)
ax.imshow(X[1], cmap="gray")
ax.axis('off')
ax = plt.subplot(2,2,3)
ax.imshow(X[2], cmap="gray")
ax.axis('off')
ax = plt.subplot(2,2,4)
ax.imshow(X[3], cmap="gray")
ax.axis('off')
plt.show()


Tambi√©n podemos combinar diferentes tipos de gr√°ficos, con diferente extensi√≥n dentro de la gr√°fica global, para generar una figura como la siguiente.
fig = plt.figure(figsize=(5,5))
ax = plt.subplot(2,2,1)
ax.imshow(X[0], cmap="gray")
ax.axis('off')
ax = plt.subplot(2,2,2)
ax.imshow(X[1], cmap="gray")
ax.axis('off')
ax = plt.subplot(2,1,2)
ax.plot(x2, y2)
plt.show()


Otros tipos de gr√°ficos
Adem√°s de la funci√≥n plot, Matplotlib nos ofrece otras funciones para generar gr√°ficos de otros tipos. Vamos a ver algunos ejemplos.
Scatter
La funci√≥n scatter nos permite visualizar un conjunto de puntos.
from numpy.random import rand

x, y = rand(2, 100)
plt.scatter(x, y)
plt.show()


Una opci√≥n muy interesante en este tipo de gr√°ficos es visualizar cada punto con un color o tama√±o diferente en funci√≥n de otra variable, que puede representar una densidad, temperatura en una localizaci√≥n, etc.
for color in ['red', 'green', 'blue']:
    n = 100
    x, y = rand(2, n)
    scale = 500.0 * rand(n) ** 5
    plt.scatter(x, y, s=scale, c=color, alpha=0.3, edgecolors='blue')

plt.grid(True)

plt.show()


Histogramas
Otro tipo de gr√°fico muy √∫til es el histograma de barras. Usamos la funci√≥n hist a la cual podemos indicarle el n√∫mero de barras con la opci√≥n bins.
data = [1, 1.1, 1.8, 2, 2.1, 3.2, 3, 3, 3, 3]
plt.hist(data, bins = 10, rwidth=0.8)
plt.show()


Animaciones
Vamos a terminar viendo c√≥mo generar animaciones, una funcionalidad muy √∫til que nos permite generar v√≠deos o gifs que pueden quedar muy bien en presentaciones. En el siguiente ejemplo veremos como generar una animaci√≥n similar a la usada en el primer post del Perceptr√≥n en el que vimos la evoluci√≥n de nuestro modelo a medida que lo entrenamos. 
# datos para entrenar el perceptr√≥n

np.random.seed(42)

x = np.random.rand(20)
y = 2*x + (np.random.rand(20)-0.5)*0.5

plt.plot(x, y, "b.")
plt.xlabel("$x_1$", fontsize=14)
plt.ylabel("$y$", rotation=0, fontsize=14)
plt.grid(True)
plt.show()


# funciones necesarias para entrenar el perceptr√≥n

def gradient(w, x, y): 
    # calculamos la derivada de la funci√≥n de p√©rdida
    # con respecto a los par√°mteros `w`
    dldw = x*w - y
    dydw = x
    dldw = dldw*dydw
    return np.mean(2*dldw)

def cost(y, y_hat): 
    # calculamos la funci√≥n de p√©rdida
    return ((y_hat - y)**2).mean()

def solve(epochs = 29, w = 1.2, lr = 0.2):
    # iteramos un n√∫mero determinado de `epochs`
    # por cada epoch, calculamos gradientes y 
    # actualizamos los pesos
    weights = [(w, gradient(w, x, y), cost(x*w, y))]
    for i in range(1,epochs+1):
        dw = gradient(w, x, y)
        w = w - lr*dw
        weights.append((w, dw, cost(x*w, y)))
    return weights

Para generar la animaci√≥n usamos el objeto animation y su funci√≥n FuncAnimation, a la cual le podemos pasar el n√∫mero de frames totales en la animaci√≥n as√≠ como la figura sobre la que queremos aplicar la animaci√≥n y la funci√≥n con la l√≥gica para actualizarla en cada frame. Tambi√©n configuramos Matplotlib para visualizar la animaci√≥n como un v√≠deo en HTML.
# animaci√≥n

from matplotlib import animation, rc
rc('animation', html='html5')

def update(i):
    xs = np.linspace(0, 1, num=100) 
    (w, dw, cost) = weights[i]
    ax.clear()
    ax.plot(x, y, "b.")
    ax.plot(xs, w*xs, "-k")
    ax.set_xlabel("$x_1$", fontsize=14)
    ax.set_ylabel("$y$", rotation=0, fontsize=14)
    ax.set_title(f"Iteraci√≥n: {i}")
    ax.grid(True)
    ax.axis([0,1,0,2])
    return ax
 
weights = solve()
fig = plt.figure(figsize=(10,6))
ax = plt.subplot(1,1,1)
anim = animation.FuncAnimation(fig, update, frames=len(weights), interval=100)
plt.close()

anim



  Your browser does not support the video tag.

Una vez generada la animaci√≥n puedes descargarla desde el widget creado.

‚ö° Para poder generar animaciones tendr√°s que instalar la librer√≠a ffmpeg, la cual no forma parte de Python. Puedes ver las instrucciones para instalarlo aqu√≠.

Resumen
En este post hemos presentado varios ejemplos de gr√°ficos que podemos generar con Matplotlib, a√∫n as√≠ existen muchas otras opciones que no hemos visto. Una buena idea es ojear los diferentes ejemplos disponibles en la galer√≠a de Matplotlib y utilizar el c√≥digo para generar el gr√°fico que m√°s se parezca al que quieres generar, y trabajar a partir de ah√≠. 
Referencias

https://matplotlib.org/gallery.html
Python for Data Analysis by Wes McKinney (O‚ÄôReilly). Copyright 2017 Wes McKinsey, 978-1-491-95766-0.
https://github.com/ageron/handson-ml2/blob/master/tools_matplotlib.ipynb

